var documenterSearchIndex = {"docs":
[{"location":"01_-_JULIA1_-_Basic_Julia_programming/0106-further_topics.html","page":"0106-further topics","title":"0106-further topics","text":"EditURL = \"https://github.com/sylvaticus/IntroSPMLJuliaCourse/blob/master/lessonsSources/01_-_JULIA1_-_Basic_Julia_programming/0106-further_topics.jl\"","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0106-further_topics.html","page":"0106-further topics","title":"0106-further topics","text":"################################################################################\n###  Introduction to Scientific Programming and Machine Learning with Julia  ###\n###                                                                          ###\n### Run each script on a new clean Julia session                             ###\n### GitHub: https://github.com/sylvaticus/IntroSPMLJuliaCourse               ###\n### Licence (apply to all material of the course: scripts, videos, quizes,..)###\n### Creative Commons By Attribution (CC BY 4.0), Antonello Lobianco          ###\n################################################################################","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0106-further_topics.html#Further-Topics","page":"0106-further topics","title":"0106 Further Topics","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0106-further_topics.html#Some-stuff-to-set-up-the-environment..","page":"0106-further topics","title":"Some stuff to set-up the environment..","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0106-further_topics.html","page":"0106-further topics","title":"0106-further topics","text":"cd(@__DIR__)\nusing Pkg\nPkg.activate(\".\")","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0106-further_topics.html","page":"0106-further topics","title":"0106-further topics","text":"If using a Julia version different than 1.7 please uncomment and run the following line (reproductibility guarantee will however be lost) Pkg.resolve() Pkg.instantiate()","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0106-further_topics.html","page":"0106-further topics","title":"0106-further topics","text":"using Random\nRandom.seed!(123)\nusing InteractiveUtils # loaded automatically when working... interactively","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0106-further_topics.html#Metaprogramming","page":"0106-further topics","title":"Metaprogramming","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0106-further_topics.html#Interfacing-with-other-languages","page":"0106-further topics","title":"Interfacing with other languages","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0106-further_topics.html#Some-performance-tips","page":"0106-further topics","title":"Some performance tips","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0106-further_topics.html","page":"0106-further topics","title":"0106-further topics","text":"View this file on Github.","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0106-further_topics.html","page":"0106-further topics","title":"0106-further topics","text":"","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0106-further_topics.html","page":"0106-further topics","title":"0106-further topics","text":"This page was generated using Literate.jl.","category":"page"},{"location":"02_-_JULIA2_-_Scientific_programming_with_Julia/0201-WranglingData.html","page":"0201-WranglingData","title":"0201-WranglingData","text":"EditURL = \"https://github.com/sylvaticus/IntroSPMLJuliaCourse/blob/master/lessonsSources/02_-_JULIA2_-_Scientific_programming_with_Julia/0201-WranglingData.jl\"","category":"page"},{"location":"02_-_JULIA2_-_Scientific_programming_with_Julia/0201-WranglingData.html#Data-Wrangling","page":"0201-WranglingData","title":"0202 Data Wrangling","text":"","category":"section"},{"location":"02_-_JULIA2_-_Scientific_programming_with_Julia/0201-WranglingData.html","page":"0201-WranglingData","title":"0201-WranglingData","text":"View this file on Github.","category":"page"},{"location":"02_-_JULIA2_-_Scientific_programming_with_Julia/0201-WranglingData.html","page":"0201-WranglingData","title":"0201-WranglingData","text":"","category":"page"},{"location":"02_-_JULIA2_-_Scientific_programming_with_Julia/0201-WranglingData.html","page":"0201-WranglingData","title":"0201-WranglingData","text":"This page was generated using Literate.jl.","category":"page"},{"location":"00_-_KOM_-_Kickoff_meeting/0000-KOMeeting.html","page":"0000-KOMeeting","title":"0000-KOMeeting","text":"EditURL = \"https://github.com/sylvaticus/IntroSPMLJuliaCourse/blob/master/lessonsSources/00_-_KOM_-_Kickoff_meeting/0000-KOMeeting.jl\"","category":"page"},{"location":"00_-_KOM_-_Kickoff_meeting/0000-KOMeeting.html","page":"0000-KOMeeting","title":"0000-KOMeeting","text":"# ## Keek off meeting","category":"page"},{"location":"00_-_KOM_-_Kickoff_meeting/0000-KOMeeting.html","page":"0000-KOMeeting","title":"0000-KOMeeting","text":"The Keek-off meeting has its own structure","category":"page"},{"location":"00_-_KOM_-_Kickoff_meeting/0000-KOMeeting.html","page":"0000-KOMeeting","title":"0000-KOMeeting","text":"View this file on Github.","category":"page"},{"location":"00_-_KOM_-_Kickoff_meeting/0000-KOMeeting.html","page":"0000-KOMeeting","title":"0000-KOMeeting","text":"","category":"page"},{"location":"00_-_KOM_-_Kickoff_meeting/0000-KOMeeting.html","page":"0000-KOMeeting","title":"0000-KOMeeting","text":"This page was generated using Literate.jl.","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"EditURL = \"https://github.com/sylvaticus/IntroSPMLJuliaCourse/blob/master/lessonsSources/01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.jl\"","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"################################################################################\n###  Introduction to Scientific Programming and Machine Learning with Julia  ###\n###                                                                          ###\n### Run each script on a new clean Julia session                             ###\n### GitHub: https://github.com/sylvaticus/IntroSPMLJuliaCourse               ###\n### Licence (apply to all material of the course: scripts, videos, quizes,..)###\n### Creative Commons By Attribution (CC BY 4.0), Antonello Lobianco          ###\n################################################################################","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html#Basic-Syntax-Elements","page":"0101-basic syntax","title":"0101 - Basic Syntax Elements","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html#Some-stuff-to-set-up-the-environment..","page":"0101-basic syntax","title":"Some stuff to set-up the environment..","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"cd(@__DIR__)\nusing Pkg\nPkg.activate(\".\")","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"If using a Julia version different than 1.7 please uncomment and run the following line (reproductibility guarantee will hower be lost) Pkg.resolve()","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"Pkg.instantiate()\nusing Random\nRandom.seed!(123)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html#Comments","page":"0101-basic syntax","title":"Comments","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"# This is a comment\na = 1 # also this one\na = #= also this one =# 1\n#= also\n#= this =#\none\n=#","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html#Code-organisation","page":"0101-basic syntax","title":"Code organisation","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"# Semicolon:\na = 1\na = 1;\nfor i in 1:3\n   println(\"i is $i\")\nend # Keyword `end` to finish a block\nprintln(\"Hello world!\")\n# println(\"This would error!\")","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html#Unicode-support","page":"0101-basic syntax","title":"Unicode support","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"Actually you can use any fancy unicode character and modifiers in the names of variable, type, funcion..","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"using Statistics # for the `mean` function, in the Standard Library\nσ²(x) = sum( (x .- mean(x)).^2 )/length(x)\nσ²([1,2,3])\nx̄ₙ = 10\nvàlidVarNαme! = 2","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html#Broadcasting","page":"0101-basic syntax","title":"Broadcasting","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"10 .+ [1,2,3]\nadd2(x) = x + 2\nadd2(10)\n# add2([1,2,3]) # would return an error\nadd2.([1,2,3])  # any, including user defined functions, can be broadcasted. No need for map, for loops, etc..","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html#based-arrays","page":"0101-basic syntax","title":"1 based arrays","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"a = [1,2,3]\na[1]","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"joke: 0 or 1 ?\nShould array indices start at 0 or 1?  My compromise of 0.5 was rejected without, I thought, proper consideration. –Stan Kelly-Bootle","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html#Basic-Mathematic-operations","page":"0101-basic syntax","title":"Basic Mathematic operations","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html#All-standard-mathepatical-arithmetic-operators-(,-,*,/)-are-supported-in-the-obvious-way.","page":"0101-basic syntax","title":"All standard mathepatical arithmetic operators (+,-,*,/) are supported in the obvious way.","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"a = 2^4         # rise to power\nb = ℯ^2; #= or =# b = exp(2) # Exponential with base ℯ\nd = log(7.3890) # base ℯ\ne = log(10,100) # custom base\nf = 5 ÷ 2       # integer division\ne = 5 % 2       # reminder (modulo operator)\na = 2//3 + 1//3     # rational numbers\ntypeof(a)\nπ == pi         # some irrational constants\ntypeof(ℯ)\nconvert(Float64,a)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html#Quotation","page":"0101-basic syntax","title":"Quotation","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"a = 'k'              # single quotation mark: a single Char\nb = \"k\"              # double quotation mark: a (Unicode) String\n#c = 'hello'         # error !\nc = \"hello\"\nd = `echo hello`     # backtick: define a command to (later) run (e.g. on the OS)\ne = \"\"\"a\nmultiline\nstring\"\"\"\nprintln(c)\nprintln(e)\nusing Markdown\nf = md\"\"\"a\n**markdown**\n_string_\"\"\"","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html#Missingness-implementations","page":"0101-basic syntax","title":"Missingness implementations","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"a = nothing # C-style, \"software engineer's null → run-time error\nb = missing # Data scientist's null → silent propagation\nc = NaN     # Not a number → silent propagation\ntypeof(a)\ntypeof(b)\ntypeof(c)\nd = 0/0\n# a2 = mean([1,a,3]) # would error\nb2 = mean([1,b,3])\nc2 = mean([1,c,3])\nb3 = mean(skipmissing([1,b,3]))\nb == missing\nismissing(b)\nb4 = [1,missing,3]\ntypeof(b4)\neltype(b4)\nnonmissingtype(eltype(b4))","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html#Random-values","page":"0101-basic syntax","title":"Random values","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"rand()       # [0,1] continuous\nrand(30:40)  # [30,40] integer\nrand(30:0.01:40) # [30,40] with precision to the second digit\nusing Distributions\nrand(Exponential(10)) # We'll see Distributions more in detail in the Scientific Programming lesson\nrand(30:40,10) # A vector of 10 random numbers.\nrand(Exponential(10),10,23)\nusing Random\nmyRNG = MersenneTwister(123) # use StableRNG for a RNG guaranteed to remain stable between Julia-versions\na1 = rand(myRNG,10:1000,5)\na2 = rand(myRNG,10:1000,5)\na1 == a2\nmyRNG = MersenneTwister(123)\nb1 = rand(myRNG,10:1000,5)\nb2 = rand(myRNG,10:1000,5)\nb1 == b2\na1 == b1\na2 == b2\n\na = rand(myRNG,Exponential(10),5)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"View this file on Github.","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0101-basic_syntax.html","page":"0101-basic syntax","title":"0101-basic syntax","text":"This page was generated using Literate.jl.","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"EditURL = \"https://github.com/sylvaticus/IntroSPMLJuliaCourse/blob/master/lessonsSources/01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.jl\"","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"################################################################################\n###  Introduction to Scientific Programming and Machine Learning with Julia  ###\n###                                                                          ###\n### Run each script on a new clean Julia session                             ###\n### GitHub: https://github.com/sylvaticus/IntroSPMLJuliaCourse               ###\n### Licence (apply to all material of the course: scripts, videos, quizes,..)###\n### Creative Commons By Attribution (CC BY 4.0), Antonello Lobianco          ###\n################################################################################","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html#Custom-Types","page":"0105-custom types","title":"0105 Custom Types","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html#Some-stuff-to-set-up-the-environment..","page":"0105-custom types","title":"Some stuff to set-up the environment..","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"cd(@__DIR__)\nusing Pkg\nPkg.activate(\".\")","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"If using a Julia version different than 1.7 please uncomment and run the following line (reproductibility guarantee will however be lost) Pkg.resolve() Pkg.instantiate()","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"using Random\nRandom.seed!(123)\nusing InteractiveUtils # loaded automatically when working... interactively","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html#\"Type\"-of-types","page":"0105-custom types","title":"\"Type\" of types","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"In Julia primitive, composite and abstract types can all be defined by the user","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"primitive type APrimitiveType 819200 end # name and size in bit - multiple of 8 and below 8388608 (1MB)\nprimitive type APrimitiveType2 819200 end\n819200/(8*1024)\nstruct ACompositeType end                # fields, constructors.. we'll see this later in details\nabstract type AnAbstractType end         # no objects, no instantialisation of objects","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html#Composite-types","page":"0105-custom types","title":"Composite types","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"mutable struct Foo # starting with a capital letter\n    field1\n    field2::String\n    field3::ACompositeType\nend","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"mutable struct Foo # error! can't change a struct after I defined it end","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"fieldnames(Foo)\n\no = Foo(123,\"aaa\",ACompositeType()) # call the default constructor (available automatically) - order matters!\ntypeof(o)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"Outer constructor","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"function Foo(f2,f3=ACompositeType()) # \"normal\" functions just happens it has the name of the object to create\n    if startswith(f2,\"Booo\")         # put whatever logic you wish\n        return nothing\n    end\n    return Foo(123,f2,f3)            # call the default constructor\nend\n\no = Foo(123,\"aaa\", ACompositeType()) # call the default constructor\no = Foo(\"blaaaaa\")                   # call the outer constructor we defined\n\no.field1       # access fields\no.field1 = 321 # modify field (because type defined as \"mutable\" !!!)\no\n\n\nfunction Base.show(io::IO, x::Foo)             # function(o) rather than o.function()\n    println(io,\"My custom representation for Foo objects\")\n    println(io,\"Field1: $(o.field1)\")\n    println(io,\"Field2: $(o.field2)\")\nend\no","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"Inner constructor","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"mutable struct Foo2\n    field1::Int64\n    field2::String\n    function Foo2(f1,f2,f3)\n        # ... logic\n        return new(f1+f2,f3)\n    end\nend\nFoo2(1,2,\"aaa\")","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"tip: Tip\nIf any inner constructor method is defined, no default constructor method is provided.","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"Foo2(1,\"aaa\") # Error, no default constructor !","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html#Parametric-types","page":"0105-custom types","title":"Parametric types","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"struct Point{T<:Number} # T must be a child of type \"Number\"\n   x::T\n   y::T\nend\n\no = Point(1,2)\nPoint(1.0,2.)\n# Point(1,2.0) # error !\n\nfunction Point(x::T, y::T=zero(T)) where {T}\n    return Point(x,y)\nend\nPoint(2)\nPoint(1.5)\n\nabstract type Figure{T<:Number} end\n\na = Array{Int64,2}(undef,2,2) # Array is nothing else than a parametric type with 2 parameters\ntypeof(a)\neltype(a)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"As we see for arrays, parameters doesn't need to be types, but can be any value of a bits type (in practice an integer value) :","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"struct MyType{T,N}\n  data::Array{T,N}\nend\n\nintMatrixInside = MyType([1 2 3; 4 5 6])\nfloatVectorInside = MyType([1 2 3])\n\nfunction getPlane(o::MyType{T,N},dim,pos) where {T,N}\nsizes = size(o.data)\nif length(sizes) > N\n  error(\"Dim over the dimensions of the data\")\nelseif sizes[dim] < pos\n  error(\"Non enought elements in dimension $dim to cut at $pos\")\nend\nreturn selectdim(o.data,dim,pos)\nend\n\ngetPlane(intMatrixInside,1,2)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"A package where non-type parameters are emploied to boost speed is StaticArray.jl where one parameter is the size of the array that hence become known at compile time","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html#Inheritance","page":"0105-custom types","title":"Inheritance","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"abstract type MyOwnGenericAbstractType end                       # the highest-level\nabstract type MyOwnAbstractType1 <: MyOwnGenericAbstractType end # child of MyOwnGenericAbstractType\nabstract type MyOwnAbstractType2 <: MyOwnGenericAbstractType end # also child of MyOwnGenericAbstractType\nmutable struct AConcreteTypeA <: MyOwnAbstractType1\n  f1::Int64\n  f2::Int64\nend\nmutable struct AConcreteTypeB <: MyOwnAbstractType1\n  f1::Float64\nend\nmutable struct AConcreteTypeZ <: MyOwnAbstractType2\n  f1::String\nend\noA = AConcreteTypeA(2,10)\noB = AConcreteTypeB(1.5)\noZ = AConcreteTypeZ(\"aa\")\n\nsupertype(AConcreteTypeA)\nsubtypes(MyOwnAbstractType1)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"tip: Tip\nWhen multiple methods are available for an object, function calls are dispatched to the most stricter method, i.e. the one defined over the exact parameter's type or their immediate parents","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"function foo(a :: MyOwnGenericAbstractType)                      # good for everyone\n  println(\"Default implementation: $(a.f1)\")\nend\nfoo(oA) # Default implementation: 2\nfoo(oB) # Default implementation: 1.5\nfoo(oZ) # Default implementation: aa\nfunction foo(a :: MyOwnAbstractType1)                            # specialisation for MyOwnAbstractType1\n  println(\"A more specialised implementation: $(a.f1*4)\")\nend\nfoo(oA) # A more specialised implementation: 8\nfoo(oB) # A more specialised implementation: 6.0\nfoo(oZ) # Default implementation: aa                             # doesn't match the specialisation, default to foo(a :: MyOwnGenericAbstractType)\nfunction foo(a :: AConcreteTypeA)\n     println(\"A even more specialised implementation: $(a.f1 + a.f2)\")\nend\nfoo(oA) # A even more specialised implementation: 12\nfoo(oB) # A more specialised implementation: 6.0\nfoo(oZ) # Default implementation: aa","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"warning: Warning\nAttention to the inheritance for parametric types. If it is true that Vector{Int64} <: AbstractVector{Int64} and Int64 <: Number, it is FALSE that AbstractVector{Int64} <: AbstractVector{Number}. If you want to allow a function parameter to be a vector of numbers, use instead templates explicitly, e.g. foo(x::AbstractVector{T}) where {T<:Number} = return sum(x)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"Vector{Int64} <: AbstractVector{Int64}\nInt64 <: Number\nVector{Int64} <: Vector{Number}\nAbstractVector{Int64} <: AbstractVector{Number}","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html#Object-oriented-model","page":"0105-custom types","title":"Object-oriented model","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"OO model based on composition","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"struct Shoes\n   shoesType::String\n   colour::String\nend\nstruct Person\n  myname::String\n  age::Int64\nend\nstruct Student\n   p::Person        # by referencing a `Person`` object, we do not need to repeat its fields\n   school::String\n   shoes::Shoes     # same for `shoes`\nend\nstruct Employee\n   p::Person\n   monthlyIncomes::Float64\n   company::String\n   shoes::Shoes\nend\ngymShoes = Shoes(\"gym\",\"white\")\nproShoes = Shoes(\"classical\",\"brown\")\nMarc     = Student(Person(\"Marc\",15),\"Divine School\",gymShoes)\nMrBrown  = Employee(Person(\"Brown\",45),3200.0,\"ABC Corporation Inc.\", proShoes)\n\nfunction printMyActivity(self::Student)\n   println(\"Hi! I am $(self.p.myname), I study at $(self.school) school, and I wear $(self.shoes.colour) shoes\") # I can use the dot operator chained...\nend\nfunction printMyActivity(self::Employee)\n  println(\"Good day. My name is $(self.p.myname), I work at $(self.company) company and I wear $(self.shoes.colour) shoes\")\nend\n\nprintMyActivity(Marc)     # Hi! I am Marc, ...\nprintMyActivity(MrBrown)  # Good day. My name is MrBrown, ...","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"OO models based on Specialisation (Person → Student) or Weack Relation (Person → Shoes) instead of Composition (Person → Arm) can be implemented using third party packages, like e.g. SimpleTraits.jl or OOPMacro.jl","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"View this file on Github.","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0105-custom_types.html","page":"0105-custom types","title":"0105-custom types","text":"This page was generated using Literate.jl.","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"EditURL = \"https://github.com/sylvaticus/IntroSPMLJuliaCourse/blob/master/lessonsSources/01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.jl\"","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"################################################################################\n###  Introduction to Scientific Programming and Machine Learning with Julia  ###\n###                                                                          ###\n### Run each script on a new clean Julia session                             ###\n### GitHub: https://github.com/sylvaticus/IntroSPMLJuliaCourse               ###\n### Licence (apply to all material of the course: scripts, videos, quizes,..)###\n### Creative Commons By Attribution (CC BY 4.0), Antonello Lobianco          ###\n################################################################################","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html#Types-and-objects","page":"0102-types and objects","title":"0102 Types and objects","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html#Some-stuff-to-set-up-the-environment..","page":"0102-types and objects","title":"Some stuff to set-up the environment..","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"cd(@__DIR__)\nusing Pkg\nPkg.activate(\".\")","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"If using a Julia version different than 1.7 please uncomment and run the following line (reproductibility guarantee will hower be lost) Pkg.resolve() Pkg.instantiate()","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"using Random\nRandom.seed!(123)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html#Types","page":"0102-types and objects","title":"Types","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"# 1 in not 1.0:\na = 1\nb = 1.0\ntypeof(a) # type is inferred !\ntypeof(b)\n# Convert type (cast)\na = 1\nb = convert(Float64,a)\ntypeof(b)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"Type hierarchy in Julia:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"Any\nAbstractString     # We'll see what all these \"abstract\" mean....\nString\n...\nAbstractArray\nArray\n....\nNumber\nComplex\nReal\nRational\nInteger\nUnsigned\nUInt64\n...\nSigned\nInt32\nInt64\nBigInt\n...\nBool\nFixedPoints\n...\nAbstractIrrational\nIrrational\nAbstractFloat\nFloat32\nFloat64\nBigFloat\n...\n...","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"Complete Number hierarchy: https://upload.wikimedia.org/wikipedia/commons/d/d9/Julia-number-type-hierarchy.svg","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"# Everythong is an object, i.e. of some \"type\"\nc = typeof(a)\ntypeof(c)\nd = sin\ntypeof(d) <: Function\ntypeof(+) <: Function\n\n# Operators are just functions:\n1 + 2\n+(1,2) # this call the function \"+\"\nimport Base.+\n# +(a,b,c) = a*b*c  # Defining my new crazy addition operation with 3 arguments\n10+20+30            # This call it\n10+20               # The addition with two parameters remains the same\n10+20+30+40         # Also this one remains with the standard addition..","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"warning: Warning\nAfter you tested this crazy addition, please restart julia or norhing will work. With great power come great responsability.. (..if you change the meaning of addition it is difficult you will not run into problems...)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html#Objects-and-variables","page":"0102-types and objects","title":"Objects and variables","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"k = 10    # \"create\" an object Int64 in memory and binds (assign) it to the `k` identifier (the variable name)\ntypeof(k)\nsizeof(k)  # bytes (1 byte is 8 bits)\nbitstring(k)\n0*2^0+1*2^1+0*2^2+1*2^3\nm = k      # name binding: it binds (assign) the entity (object) referenced by a to the b identifier (the variable name)\nm == k     # are the two objects equal ?\nm === k    # are the two identifiers binding the same identical object in memory ?","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html#Mutability-property-of-Julia-objects","page":"0102-types and objects","title":"Mutability property of Julia objects","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"k = 10\nv = [1,2]\np = 'z'\ng = \"hello\"\nismutable(k)\nismutable(v)\nismutable(p)\nismutable(g)\n# mutable objects are stored in memory \"directly\", while for mutable objects it is its memory address to be stored","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html#Three-different-ways-to-\"copy\"-objects...","page":"0102-types and objects","title":"Three different ways to \"copy\" objects...","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"a = [[[1,2],3],4] # First element of a is said to be \"mutable\", second one is not:\nismutable(a[1])\nismutable(a[2])\nb = a            # binding to a new identifier\nc = copy(a)      # create a new copy of a and binds it to c\nd = deepcopy(a)  # copy all the references recursively and assign this new object to d\n\nc == a           # are the two objects equal ?\nc === a          # are the two identifiers binding the same identical object in memory ?\na[2] = 40        # rebinds a[2] to an other objects and at the same time mutates object a:\nb\nc\nd\na[1][2] = 30     # rebinds a[1][2] and at the same time mutates both a and a[1]\nb\nc\nd\na[1][1][2] = 20\nb\nc\nd\na = 5            # rebinds a:\nb\nc\nd","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"note: Note\nConsider these memory isues when we'll discuss calling a function by reference/value !","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"View this file on Github.","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0102-types_and_objects.html","page":"0102-types and objects","title":"0102-types and objects","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Introduction-to-Scientific-Programming-and-Machine-Learning-with-Julia","page":"Index","title":"Introduction to Scientific Programming and Machine Learning with Julia","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"This site contains the scripts discussed in the video.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"GitHub repository\nYouTube playlist","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"EditURL = \"https://github.com/sylvaticus/IntroSPMLJuliaCourse/blob/master/lessonsSources/01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.jl\"","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"################################################################################\n###  Introduction to Scientific Programming and Machine Learning with Julia  ###\n###                                                                          ###\n### Run each script on a new clean Julia session                             ###\n### GitHub: https://github.com/sylvaticus/IntroSPMLJuliaCourse               ###\n### Licence (apply to all material of the course: scripts, videos, quizes,..)###\n### Creative Commons By Attribution (CC BY 4.0), Antonello Lobianco          ###\n################################################################################","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Predefined-types","page":"0103-predefined types","title":"0103 Predefined types","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Some-stuff-to-set-up-the-environment..","page":"0103-predefined types","title":"Some stuff to set-up the environment..","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"cd(@__DIR__)\nusing Pkg\nPkg.activate(\".\")","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"If using a Julia version different than 1.7 please uncomment and run the following line (reproductibility guarantee will hower be lost) Pkg.resolve() Pkg.instantiate()","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"using Random\nRandom.seed!(123)\nusing InteractiveUtils # loaded automatically when working... interactively","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Primitive-types","page":"0103-predefined types","title":"Primitive types","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Primitive types have a fixed number of bits associated to them. Examples of them are Int64, Float64, Char, UInt64, UFloat64, Int32, Float32,... Even primitive types can be custom defined. See the \"custom types\" segment !","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Char-and-Strings-Char,-String","page":"0103-predefined types","title":"Char and Strings - Char, String","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"a = \"Hello World \"\nb = a[2]\ntypeof(b)\nb = a[3:end]\ntypeof(b)\n#a[2] = 'E' # error !\n\n# info...\nismutable(a) # long story.... https://github.com/JuliaLang/julia/issues/30210\nlength(a)\nfindfirst(isequal('o'), a)\nfindnext(isequal('o'), a, 6)\noccursin(\"world\",a)\noccursin(lowercase(\"world\"),lowercase(a))\nusing Unicode\noccursin(Unicode.normalize(\"world\", casefold=true),Unicode.normalize(a, casefold=true))\nendswith(a,\"ld \")\nstartswith(a,\"Mooo\")\noccursin(r\"H*.d \", a)\n\n# modifications..\nlowercase(a)\nlowercasefirst(a)\nsplit(a, \" \")\nreplace(a,\"World\" => \"Universe\")\nstrip(a)\n\n# concatenation..\na = \"Hello\"; b= \"World\"\nc = join([a,b],\" \")\nc = a*\" \"*b\nc = string(a,\" \",b)\nc = \"$a $b\"              # interpolation\n\n# Conversion..\na = parse(Int64,\"2012\")\nb = string(2019)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"warning: Warning\nAttention not to confuse the string function with the String type and the String() constructor!","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"# to know more...\nmethodswith(String,supertypes=true); # where any argument is a String or any parent type (such e.g. AbstractString)\n# See also https://docs.julialang.org/en/v1/manual/strings/","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Arrays-Array{T,N}","page":"0103-predefined types","title":"Arrays - Array{T,N}","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Array{T,NDims} A parameteric type where the type of the content and the number of dimensions define the specific type","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"tip: Tip\nVector{T} is an alias for Array{T,1} and Matrix{T} is an alias for Array{T,2}, but there isn't anything \"special\" for 1 or 2 dimensions compared to more dimensions","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Vectors-Array{T,1}","page":"0103-predefined types","title":"Vectors - Array{T,1}","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"One-dimensions arrays in julia are treated as column vector, and, depending on the inner type, they can be stored efficiently contiguously in memory. However they are NOT the same of a single column of a two dimensions array. A row vector is necessarily instead a single row of a 2 dimensions array.","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"a = [1,2,3]\nb = [1 ; 2 ; 3 ;;] # This syntax requires Julia >= 1.7\na == b","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Initialisation","page":"0103-predefined types","title":"Initialisation","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"a = [1,2,3]; #= or =# a = [1;2;3]\na = [1; 6:-2:2; 10] # notes: (a) the semicolon, (b) the range includes BOTH the extremes\na = [[1,2],[3,4]]   # nested vectors. Each elements can have a different lenght, but rules of linear algebra doesn't apply","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"danger: Danger\nDon't confuse nested vectors with multi-dimensional arrays!","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Empty (zero-elements) arrays:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"a = []\na = Int64[]\na = [1,2,3]\nb = [1,\"pizza\",\"beer\"]\na = Array{Int64,1}()","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"warning: Warning\nWatch out for the difference between a = Array{Int64,1}() and a = Array{Int64,1}","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"a = Vector{Int64}()","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"n-elements initialisation:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"n = 3\nT = Int64\nzeros(n)            # zeros (Float64)\nzeros(T,n)          # zeros (casted as type T)\nones(n)             # ones  (Float64)\nones(T,n)           # ones  (casted of type T)\nArray{T,1}(undef,n) # garbage\nfill(2,3)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Accessing-Vectors","page":"0103-predefined types","title":"Accessing Vectors","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"a = [101:200;]\na[1]\na[end]\na[[1; 6:-2:2; 10]] # indicised by a vector of positions","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Collecting-iterators-into-vectors","page":"0103-predefined types","title":"Collecting iterators into vectors","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"aRange = 3:2:7\na = collect(aRange)\ntypeof(aRange)\ntypeof(aRange) <: AbstractArray # Everywhere an AbstractArray is expected, you can provide a range instead","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Common-operations-with-vectors","page":"0103-predefined types","title":"Common operations with vectors","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"a = [1,2,3]\nreverse(a), a[end:-1:1] # Other way to revert an array\nvcat([1,2,3],[4,5],6)\n\npush!(a,4)  # add as individual elements\nappend!(a,5) # add as many new elements","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"tip: Functions with exclamation marks\nBy convention functions that modify one of their parameters (and usually this is the first one) are named with an exclamation mark at the end. Remember (most) unicode characters are valid in functions or variable names.","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"push!([[1,2],[3,4,5]],[6,7])\nappend!([1,2,3,4,5],[6,7])\n\npop!(a)\na\npopfirst!(a)\ndeleteat!(a,2)\npushfirst!([2,3],1)\na = [2,1,3,1]\nsort(a)   # also `sort!(a)``\nunique(a) # also `unique!(a)`\nin(1,a)   # also available as operator: `if 2 in a [...] end`\nlength(a) # number of elements contained in all the dimensions\nsize(a),size(a,1) # number of elements by dimension\nminimum(a)\nmin(a...)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"tip: ...\n\"...\" is called the splat operator and it is used to convert the elements in a vector into a tuple of separate elements in a function call, like the example above","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"min(4,7,3)\nminimum([4,7,9])\nargmin([4,2,5,2])\nsum([1,2,3])\ncumsum([1,2,3])\nempty!(a) # only for Vectors\nusing Random\nshuffle([1,2,3]) # also shuffle!([1,2,3])\nisempty(a)\nfindall(x -> x == 1, [2,1,3,1]) # anonymous function returning an array of bools, findall then return the indexes\nfindfirst(x -> x == 1, [2,1,3,1])\nmyComparitionWith1(i) = i==1\nfindall(x -> myComparitionWith1(x), [2,1,3,1])\n\n# delete [7,2,5] from an 1:10 array:\ndata     = [1:10;]\ntoDelete = [7,5,2]\ndeleteat!(data, findall(x -> x in toDelete, data))\n\nfor (i,value) in enumerate([10,20,30]) # iterator that returns an index/element tuple\n    println(\"$i - $value\")\nend\n\nnames = [\"Marc\", \"Anne\"]\nsex   = ['M','F']\nage   = [25,20]\n\nfor zippedElements in zip(names,sex,age) # iterator that returns tuples made with one element per argument of zip\n    println(zippedElements)\nend","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Multidimensional-arrays-Array{T,N}","page":"0103-predefined types","title":"Multidimensional arrays - Array{T,N}","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Initialisation-2","page":"0103-predefined types","title":"Initialisation","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"a = [[1,2,3] [4,5,6]] # By column, i.e. elements of the first column, elements of the second column, ...\na = [1 4; 2 5; 3 6]   # By row, i.e. elements of the first row, elements of the second row, ...\n\n# Empty (zero-elements) arrays:\na = Array{Float64}(undef, 0, 0, 0) # using explicitly the constructor and explicitly giving zero for each wanted dimension\n# n-elements initialisation:\n(T,n,m,g,j) = (Int64,1,2,3,'a')\na = zeros(n,m,g)            # n,m,g-elements zeros array\na = ones(n,m,g)             # n,m,g-elements ones array\na = Array{T,3}(undef,n,m,g) # n,m,g-elements array whose content is garbage\na = fill(j,n,m,g)           # n,m,g-elements array of identical j elements\na = rand(n,m,g)             # n,m,g-elements array of of random numbers\na = [3x + 2y + z for x in 1:2, y in 2:3, z in 1:2] # from using list comprehension","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Accessing-n-dimensional-arrays","page":"0103-predefined types","title":"Accessing n-dimensional arrays","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Access by indicating position","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"a = [1 2 3 4; 5 6 7 8; 9 10 11 12]\na[2,1]   # comma to separate the dimensions","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"warning: Warning\nDon't confuse a[i,j] for selecting an element of a Matrix with a[i][j] to select the inner component of a nested array","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"a[1,2:3]   # with a range on the second dimension\na[[1,3],1] # with a vector of positions in the first dimension\na[2,:]     # with a full range (all values) in the second dimension, i.e. all columns value for row 2","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"warning: Warning\nNote that when the data as only one element on a given dimension, julia reduces the dimensions automatically: the result of a[2,:] is NOT a row vector (that is a one-row matrix) but a one dimensional array","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Access by a mask (boolean selection)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"b = [true false true false; true true true false; true false true false]\na[b] # always flatted array returned (need eventually reshaping, see later)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Funcionality-related-to-dimensions","page":"0103-predefined types","title":"Funcionality related to dimensions","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"size(a)              # returns a tuple (i.e. an immutable list) with the sizes of the n dimensions\nndims(a)             # return the number of dimensions of the array (e.g. `2` for a matrix)\nreshape(a, 2,3,2)\n2*3*2 == length(a)\nb = rand(2,1,3)\ndropdims(b,dims=(2)) # remove the specified dimensions, provided that the specified dimension have only a single element\npermutedims(a)  # \"swap\" the dimensions\nreshape(a,4,3)  # keep the column mayor order\nfor slice in eachslice(a,dims=1)\n    println(slice)\nend\na = reshape(1:24, 3,4,2)\nfor slice in eachslice(a,dims=1)\n    println(slice)\nend\na = [1 2;3 4; 5 6]\nselectdim(a,1,3) # Select an hyperplane on dimension 1 (rows) at position 3. Returns a view","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Flat-to-vector..","page":"0103-predefined types","title":"Flat to vector..","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"a = [1 2; 3 4]\nvec(a)        # shadow copy (different view of the underlying data)\nreshape(a,4)  # shadow copy\na[:]          # allocate, as all slice operations do","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Other-functionality-related-to-Arrays","page":"0103-predefined types","title":"Other functionality related to Arrays","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"vcat([1 2; 3 4], [5 6; 7 8]) # works also for DataFrames\nhcat([1,2,3],[4,5,6])        # works also for DataFrames\na = [1 2; 3 4]\nb = similar(a) # garbage inside\ncat(a,a,a,dims=3)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Sort by column (field)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"a = [[3,2,1] [20,30,20] [1000,3000,2000] [300,100,200]]\nidx = sortperm(a[:,3], rev=true) # return the positions that sort the 3rd column\nsortedMatrix = a[idx,:] # selected by using the sorted positions array on the row dimension\nsortslices(a, dims=2)   # by cols, using the first row to sort\nsortslices(a, dims=1)   # by rows, using the first column to sort\nsortslices(a, dims=1, by = x -> (x[2],x[4])) # by rows, using second and fourth columns","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Basic-linear-algebra","page":"0103-predefined types","title":"Basic linear algebra","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"using LinearAlgebra\na = [-1,2,3]\nb = [4,5,6]\ntranspose(a)\na'\nnorm(a)   # l-2 by default\nnorm(a,1)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Vector products:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"dot(a,b)    # dot, aka \"inner\" product\na' * b  == dot(a,b)\ncross(a,b)  # cross product\na .* b      # element-wise product\na * b'\n\nA = [1 2 3; 6 4 5; 7 8 9]\n\nA^(-1) # inverse\nA^2\ndet(A) # determinant\ntranspose(A)\nA'","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"warning: Warning\nBe aware that transpose works only for numerical types. When the matrix contains other types (e.g. strings), use permutedims","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"diag(A)\nI # operator that automatically scale to the context without actually building the matrix\nA*I\nB = [1 2; 3 4]; B*I\n(evalues, evectors) = eigen(A)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Tuples-Tuple{T1,T2,...}","page":"0103-predefined types","title":"Tuples - Tuple{T1,T2,...}","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"A \"collection\" similar to Array but:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Immutable\nCan efficiently host heterogeneous types, as type information is stored for each individual element\nLinear algebra doesn't apply (use StaticArray.jl package for that)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Can be tought as anonymous (immutable) structures Used to unpack multiple values, e.g. to store on inddividual variables the output of functions with multiple return value","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Initialisation-3","page":"0103-predefined types","title":"Initialisation","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"t = (1,2.5,\"a\",3)\nt = 1,2.5,\"a\",3\ntypeof(t)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Indexing","page":"0103-predefined types","title":"Indexing","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"t[1]","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Conversion","page":"0103-predefined types","title":"Conversion","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"v = [1,2,3]\nt = (v...,) # note the comma\nv2 = [t...]\nv3 = [i[1] for i in t]\nv4 = collect(t)\nv == v2 == v3 == v4","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Named-tuples-NamedTuple{T1,T2,...}","page":"0103-predefined types","title":"Named tuples - NamedTuple{T1,T2,...}","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"As the name suggests, named tuples are collection similar to ordinary tuples, but whose indexing can accept also a name:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"nt = (a=1, b=2.5)\n#nt = (\"a\"=1, \"b\"=2.5)    # Error !\ntypeof(nt)\nnt[1]\nnt.a\nkeys(nt)\nvalues(nt)\n\nfor (k,v) in pairs(nt)\n    println(\"$k - $v\")\nend","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"warning: Warning\nThe keys of NamedTuples are symbols, not strings. We'll see symbols in the metaprogramming segment.","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Conversion-2","page":"0103-predefined types","title":"Conversion","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"k = [:a,:b,:c]\nv = [1,2,3]\nnt = NamedTuple(Dict(:a=>1,:b=>2,:c=>3))             # Order not guaranteed! We are \"lucky\" here\nnt = NamedTuple(Dict([k=>v for (k,v) in zip(k,v)]))  # Same...\nv2 = [nt...]\nv3 = [i[1] for i in nt]\nv4 = collect(nt)\nv == v2 == v3 == v4","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Dictionaries-Dict{Tkey,TValue}","page":"0103-predefined types","title":"Dictionaries - Dict{Tkey,TValue}","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Dictionary are mutable, key-referenced containers:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":" Mutable Immutable\nUse position Arrays Tuples\nUse keys Dictionaries Named tuples","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"warning: Warning\nNote that order is not preserved. For insertion-order preservation see OrderedDict and for sorted dictionaries see SortedDict, both from the DataStructures.jl package.","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Initialisation-4","page":"0103-predefined types","title":"Initialisation","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"mydict = Dict(); #= or better =#  mydict = Dict{String,Int64}()\nmydict = Dict('a'=>1, 'b'=>2, 'c'=>3)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Indexing-2","page":"0103-predefined types","title":"Indexing","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"mydict['a']\n#mydict['d']     # error!\nget(mydict,'d',0) # specific a default if key not found","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Adding/deleting/checking","page":"0103-predefined types","title":"Adding/deleting/checking","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"mydict['d'] = 4\n\ndelete!(mydict,'d')\nhaskey(mydict, 'a')\nin(('a' => 1), mydict)\ntypeof('a' => 1)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Conversion-3","page":"0103-predefined types","title":"Conversion","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Array - > Dictionary","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"map((i,j) -> mydict[i]=j, ['e','f','g'], [4,5,6])\nmydict\nk = [:a,:b,:c]\nv = [1,2,3]\nmydict = Dict([k=>v for (k,v) in zip(k,v)])","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Dictionary -> Arrays","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"collect(keys(mydict)) # keys or values alore return an iterator\ncollect(values(mydict))","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Iteration","page":"0103-predefined types","title":"Iteration","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"for (k,v) in mydict\n   println(\"$k is $v\")\nend","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Sets-Set{T}","page":"0103-predefined types","title":"Sets - Set{T}","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"s = Set(); #= or better =# Set{Int64}()\ns = Set([1,2,3,4]) # Only a single `2` will be stored\ns\npush!(s,5)\ndelete!(s,1)\ns2 = Set([4,5,6,7])\nintersect(s,s2)\nunion(s,s2)\nsetdiff(s,s2)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Date-and-time-Date,-DateTime","page":"0103-predefined types","title":"Date and time - Date, DateTime","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"using Dates # a standard library module dealing with dates and times, including periods and calendars","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"While a DateTime is a more informative object it is also a much more complex one, as it has to deal with problems as the time zones and the daylight saving","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Creation-of-a-date-or-time-object-(\"input\")","page":"0103-predefined types","title":"Creation of a date or time object (\"input\")","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"From current (local) date/time...","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"todayDate = today()\nnowTime = now()\ntypeof(todayDate)\n\ntypeof(nowTime)\nDate     <: Dates.AbstractTime\nDateTime <: Dates.AbstractTime\nnowTimeUnix = time()  # The so-called \"Unix time, a 64bit integer counting the number of seconds since the beginning of the year 1970\nnowTime = Dates.unix2datetime(nowTimeUnix) # attention this is not local but UTC (Coordinated Universal Time - the Greenwitch time )!\nnowTime = Dates.now(Dates.UTC) # an other way to have UTC time","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"tip: Tip\nFor Time Zone functionalities and conversion, use the external package TimeZone.jl","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"From a String...","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"christmasDay      = Date(\"25 Dec 2030\", \"d u yyyy\")\nnewYearDay        = Date(\"2031/01/01\", \"yyyy/m/d\")\nchristmasLunch    = DateTime(\"2030-12-25T12:30:00\", ISODateTimeFormat)   # well known string datetime ISO8601 Format\nnewYearEvenDinner = DateTime(\"Sat, 30 Dec 2030 21:30:00\", RFC1123Format) # an othe well known format","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Date and time formatters:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"y  Year digit (ef yyyy => 2030, yy => 30)\nm  Month digit (eg m => 3, mm => 03)\nu  Month name (eg \"Jan\")\nU  Month name long (eg \"January\")\ne  Day of week (eg \"Tue\")\nE  Day of week long (eg \"Tuesday\")\nd  Day of month (eg d => 3, dd => 03)\nH  Hour digit (eg H => 8, HH => 08)\nM  Minute digit (eg M => 0, MM => 00)\nS  Second digit (eg S => 0, SS => 00)\ns  Millisecond digit (eg .000, fixed 3 digits)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Note that the doubling for the digits matters only for using the formatters in the output (see later)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"From a tuple of integers: y, m, d, H, M, S, s ...","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"d  = Date(2030, 12)  # no need to give it all\ndt = DateTime(2030, 12, 31, 9, 30, 0, 0)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Date/Time-extraction-of-information-(\"output\")...","page":"0103-predefined types","title":"Date/Time extraction of information (\"output\")...","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"To String represerntation...","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Dates.format(newYearDay, \"dd/m/yy\")\nDates.format(christmasLunch, \"dd/mm/yy H:M:SS\")","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Other...","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"# Date and DateTime...\nyear(christmasDay)\nisleapyear(christmasDay)\nmonth(christmasLunch)\nmonthname(christmasDay)\nday(christmasDay)\ndayofweek(christmasDay)\ndayname(christmasDay)\ndaysofweekinmonth(christmasDay) # there are 4 Wednesdays in December 2030\ndayofweekofmonth(christmasDay)  # and the 25th is the 4th of them\n\n# Only datetime..\nhour(christmasLunch)\nminute(christmasLunch)\nsecond(christmasLunch)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Periods-and-datetime-arithmetics","page":"0103-predefined types","title":"Periods and datetime arithmetics","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"hollidayPeriod = newYearDay - christmasDay  # between dates is in days\nlongPeriod = Date(2035,6,1) - christmasDay\nmealPeriod = DateTime(2030,12,31,23,30) - newYearEvenDinner # between datetime is in milliseconds\n#newYearDay - newYearEvenDinner # error! no mixed\nconvert(DateTime,newYearDay)\nconvert(Date,newYearEvenDinner) # possible information loss\nmealPeriod = convert(DateTime,newYearDay) - newYearEvenDinner\ntypeof(hollidayPeriod)\ntypeof(mealPeriod)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Period hierarchy:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Period\nDatePeriod\nYear\nMonth\nWeek\nDay\nTimePeriod\nHour\nMinute\nSecond\nMillisecond\nMicrosecond\nNanosecond","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"#convert(Dates.Year,longPeriod)      # going up: error or inexacterror\nconvert(Dates.Millisecond,longPeriod) # going down:  fine\nconvert(Dates.Millisecond,mealPeriod)\n\ncanLongPeriod = Dates.canonicalize(longPeriod)\ntypeof(canLongPeriod)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"That the best we can get. We can't \"easily\" decompose a \"period\" in  years or months... how many days in a month ? 31 or 30 ? And in an year ? A Period doesn't store information on when it starts. However we can make math with periods based on a specific date/time:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"nextChristmas                = christmasDay + Year(1) # We can use the constructors of the various periods\nchristmasPresentsOpeningTime = christmasLunch + Hour(3)\nthisWeekdayNextCentury       = dayname(today()+Year(100))","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Ranges","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"semesters = Dates.Date(2020,1,1):Dates.Month(6):Dates.Date(2022,1,1)\ncollect(semesters)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html#Adjustments","page":"0103-predefined types","title":"Adjustments","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Iterate the past/future days of a date untill some condition is true","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"sundayBefChristmas = toprev(d -> Dates.dayname(d) == \"Sunday\", christmasDay)\nlastDayOfThisMonth = tonext(d -> Dates.day(d+Day(1)) == 1, today())","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"Find first or last weekday of {month,year} of a given date:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"lastTuesdayOfThisMonth = tolast(today(), 2, of=Month) # \"2\" stands for Tuesday\nfirstSundayOfThisYear  = tofirst(today(), 7, of=Year) # \"7\" stands for Sunday","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"View this file on Github.","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0103-predefined_types.html","page":"0103-predefined types","title":"0103-predefined types","text":"This page was generated using Literate.jl.","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"EditURL = \"https://github.com/sylvaticus/IntroSPMLJuliaCourse/blob/master/lessonsSources/01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.jl\"","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"################################################################################\n###  Introduction to Scientific Programming and Machine Learning with Julia  ###\n###                                                                          ###\n### Run each script on a new clean Julia session                             ###\n### GitHub: https://github.com/sylvaticus/IntroSPMLJuliaCourse               ###\n### Licence (apply to all material of the course: scripts, videos, quizes,..)###\n### Creative Commons By Attribution (CC BY 4.0), Antonello Lobianco          ###\n################################################################################","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html#Control-Flow-and-Functions","page":"0104-control flow and functions","title":"0104 Control Flow and Functions","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html#Some-stuff-to-set-up-the-environment..","page":"0104-control flow and functions","title":"Some stuff to set-up the environment..","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"cd(@__DIR__)\nusing Pkg\nPkg.activate(\".\")","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"If using a Julia version different than 1.7 please uncomment and run the following line (reproductibility guarantee will hower be lost) Pkg.resolve() Pkg.instantiate()","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"using Random\nRandom.seed!(123)\nusing InteractiveUtils # loaded automatically when working... interactively","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html#Variables-scope","page":"0104-control flow and functions","title":"Variables scope","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"The scope of a variable is the region of code where the variable can be accessed directly (without using prefixes). Modules, functions, for and other blocks (but notably not \"if\" blocks) introduce an inner scope that hinerit from the scope where the block or function is defined (but not, for function, from the caller's scope). Variables that are defined outside any block or function are global for the module where they are defined (the Main module if outside any other module, e.g. on the REPL), the others being local. Variables defined in a for block that already exists as global behave differently depending if we are working interactively or not:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"g  = 2\ng2 = 20\nfor i in 1:2\n    l1 = g2                                       # l1: local, g2: global (read only)\n    l1 += i\n    g = i                                         # REPL/INTERACTIVE: global (from Julia 1.5), FILE MODE: local by default (with a warning `g` being already defined)\n    g += i\n    println(\"i: $i\")\n    println(\"l1: $l1\")\n    println(\"g: $g\")\n    for j in 1:2\n        l1 += j                                   # still the local in outer loop, not a new local one\n        l2 = j\n        g  += j\n        println(\"j: $j\")\n        println(\"l1 inside inner loop: $l1\")\n        println(\"l2 inside inner loop: $l2\")\n        println(\"g inside inner loop: $g\")\n    end\n    # println(\"l2 post: $l2\")                     # error: l2 not defined in this scope\n    println(\"l1 post: $l1\")\n    println(\"g post: $g\")\nend\n# println(\"l1 global $l1\")                        # error; l1 is not defined in the global scope\nprintln(\"g in global: $g\")                        # REPL/INTERACTIVE: \"7\", FILE MODE: \"2\"\n\nfunction foo(i)\n    l1 = g2                                       # l1: local, g2: global (read only)\n    l1 += i\n    g = i                                         # REPL/INTERACTIVE and FILE MODE: local by default (with a warning `g` being already defined)\n    g += i\n    println(\"i: $i\")\n    println(\"l1: $l1\")\n    println(\"g: $g\")\n    for j in 1:2\n        l1 += j                                   # still the local in outer loop, not a new local one\n        l2 = j\n        g  += j\n        println(\"j: $j\")\n        println(\"l1 inside inner loop: $l1\")\n        println(\"l2 inside inner loop: $l2\")\n        println(\"g inside inner loop: $g\")\n    end\n    # println(\"l2 post: $l2\")                     # error: l2 not defined in this scope\n    println(\"l1 post: $l1\")\n    println(\"g post: $g\")\nend\n\nprintln(\"Calling foo..\")\nfoo(10)\nprintln(\"g in global: $g\")                        # REPL/INTERACTIVE: \"7\", FILE MODE: \"2\"\n\ng = 2\ninclude(\"010401-varScopeExample.jl.txt\")            # gives a warning !","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html#Repeated-iterations:-for-and-while-loops,-List-Comprehension,-Maps","page":"0104-control flow and functions","title":"Repeated iterations: for and while loops, List Comprehension, Maps","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"for i in 1:2, j in 3:4             # j is the inner loop\n    println(\"i: $i, j: $j\")\nend\na = 1\nwhile true             # or condition, e.g. while a == 10\n    global a += 1\n    println(\"a: $a\")\n    if a == 10\n        break\n    else\n        continue\n    end\n    println(\"This is never printed\")\nend","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html#List-Comprehension","page":"0104-control flow and functions","title":"List Comprehension","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"[ i+j for i in 1:2, j in 3:4 if j >= 4]","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html#Maps","page":"0104-control flow and functions","title":"Maps","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"Apply a (possible anonymous) function to a list of arguments:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"map((name,year) -> println(\"$name is $year year old\"), [\"Marc\",\"Anna\"], [25,22])","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"warninng: Warninng\nDon't confuse the single-line arrows used in anonymous functions (->) with the double-line arrow used to define a Pair (=>)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html#Conditional-statements:-if-blocks-and-ternary-operators","page":"0104-control flow and functions","title":"Conditional statements: if blocks and ternary operators","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"a = 10\n\nif a < 4                      # use `!`, `&&` and `||` for \"not\", \"and\" and  \"or\" conditions\n    println(\"a < 4\")\nelseif a < 8\n    println(\"a < 8\")\nelse\n    println(\"a is big!\")\nend\n\na = 10\n\nif a < 5\n  b = 100\nelse\n  b = 200\nend\n\nb","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"Ternary operators","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"b =  a < 5 ? 100 : 200   # ? condition : if true : if false","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"Short-circuit evaluation","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"b = 100\n(a < 5) || (b = 200)    # replace an if: the second part is executed unless the first part is already true\nb\n(a < 50) || (b = 500)   # here is never executed\nb","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"warning: Warning\nDon't confuse boolean operators && and || with their analogous & and | bitwise operators","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"a = 3\nb = 2\nbitstring(a)\nbitstring(b)\n\n##a && b     # error non boolean used in boolean context\na & b\na | b","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html#Functions","page":"0104-control flow and functions","title":"Functions","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"function foo(x)             # function definition\n    x+2\nend\nfoo(2)                      # function call\ninlineFunction(x) = x+2\nfoo2 = x -> x+2             # anonymous function (aka \"lambda function\") and assignment to the variable foo2\nfoo2(2)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"A nested function:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"function f1(x)\n    function f2(x,y)\n        x+y\n    end\n    f2(x,2)\nend\n\nf1(2)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"A recursive function:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"function fib(n)                   # This is a naive implementation. Much faster implementations of the Fibonacci numbers exist\n    if n == 0  return 0\n    elseif n == 1 return 1\n    else\n     return fib(n-1) + fib(n-2)\n    end\nend\nfib(4)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html#Function-arguments","page":"0104-control flow and functions","title":"Function arguments","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html#Positional-vs-keyword-arguments","page":"0104-control flow and functions","title":"Positional vs keyword arguments","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"f(a,b=1;c=1) = a+10b+100c  # `a` and `b` are positional arguments (`b` with a default provided), `c` is a keyword argument\nf(2)\nf(2,c=3)\n\nfoo(a, args...;c=1) = a + length(args) + sum(args) + c\nfoo(1,2,3,c=4)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"Rules for positional and keyword arguments:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"keyword arguments follow a semicolon ; in the parameters list of the function definition\na positional argument without a default can not follow a positional argument with a default provided\nthe splat operator to define variable number of arguments must be the last positional argument\nthe function call must use positional arguments by position and keyword arguments by name","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"# foo(a::String=\"aaa\",b::Int64) = \"$a \"+string(b) # error! Optional positional argument before a mandatory positional one","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html#Argument-types-and-multiple-dispatch","page":"0104-control flow and functions","title":"Argument types and multiple dispatch","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"Simple to understand the usage, complex to understand the deep implications","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"foo3(a::Int64,b::String) = a + parse(Int64,b)\nfoo3(2,\"3\")\nfoo3(a::String,b::Int64) = parse(Int64,a) + b\nfoo3(\"3\",2)\nmethods(foo3)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"Multiple dispatch allows to compile a specialised version JIT at run time, on the first call with the given parameters type We will see it again when dealing with type inheritance In general, unless we need to write specialised methods, no need to specify the type of the parameters. No influence on performances, this is automatically inferred (and the funciton compiled) based on the run-time type of the argument","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"!!! tip Functions performances tip         The most important things for performances are (1) that the function is type stable, that is that conditional to a specific combination of the types  of the parameters the function return the same type. This is the condition to have a working chain of type inference across function calls, (2) that no (non constant) global constants are used in the function and indeed all the required information for the functio ndoing its work is embedded in the function parameters","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html#Function-templates","page":"0104-control flow and functions","title":"Function templates","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"foo3(a::T,b::String) where {T<: Number} = a + parse(T,b)             # can use T in the function body\nfoo3(2,\"1\")\nfoo3(1.5,\"1.5\")\nfoo4(a::Int64,b::T where T <: Number) = a + b                        # ok not used in functio nbody\nfoo4(a::Int64,b::Array{T} where T <: Number) = a .+ fill(T,b,2)      # wil lerror, can't use T in the function body\n# foo4(2,[1,2])                                                     # run time error, T not defined","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html#*Call-by-reference*-vs.-*call-by-value*","page":"0104-control flow and functions","title":"Call by reference vs. call by value","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"How the variable used as function argument within the function body relates to the variable used in calling the function ?","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"call by value: the value of the argument is copied and the function body works on a copy of the value\ncall by reference: the function works on the same object being referenced by the caller variable and the function argument\ncall by sharing (Julia): the arguments are just new local variables that bind the same object. The effects of \"modifications\" on the local variable on the caller's one depends on the mutability property of the object as we saw in the Types and objects segment:\nimmutable objects: we can only have that the argument is rebinded to other objects. No effects on the original caller object\nmutable objects: if the argument is rebinded to an other object, no effects on the caller object. If the object is modified, the caller object (being the same object) is also modified","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"x = 10\nfoo(y) = y = 1\nfoo(x)\nx\nfoo(x) = x[1] = 10\nx = [1,2]\nfoo(x)\nx\nfoo3(x) = x = [10,20]\nfoo3(x)\nx","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"info: Info\nFunctions that modify at least one of their arguments are named, by convention, with an exclamation mark at the end of their name and the argument(s) that is (are) modified set as the first(s) argument(s)","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"foo!(x) = x[1] = 10 # to follow the convention","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html#do-blocks","page":"0104-control flow and functions","title":"do blocks","text":"","category":"section"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"Functions that accept an other function as their first parameter can be rewritten with the function itself defined in a do block:","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"using Statistics\npool(f,x,poolSize=3) = [f(x[i:i+poolSize-1]) for i in 1:length(x)-poolSize+1] # a real case, used in neural networks as pooling layer\npool(mean,[1,2,3,4,5,6])\npool(maximum,[1,2,3,4,5,6])\npool([1,2,3,4,5]) do x      # x is a local variable within the do block. We need as many local variables as the number of parameters of the inner function\n    sum(x)/length(x)\nend","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"Using the doblock we can call the outer function and define the inner function at the same time.do` blocks are frequently used in input/output operations","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"View this file on Github.","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"","category":"page"},{"location":"01_-_JULIA1_-_Basic_Julia_programming/0104-control_flow_and_functions.html","page":"0104-control flow and functions","title":"0104-control flow and functions","text":"This page was generated using Literate.jl.","category":"page"}]
}
